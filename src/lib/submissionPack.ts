/**
 * Submission Pack Generator
 * Creates program-specific submission packages with cover pages and compliance checklists
 */

import { PlanDocument } from './schemas/userProfile';

export interface SubmissionPackOptions {
  programId: string;
  programName: string;
  programType: 'grant' | 'loan' | 'equity' | 'visa';
  includeCoverPage: boolean;
  includeComplianceChecklist: boolean;
  includePlan: boolean;
  includeFinancials: boolean;
  includeTeam: boolean;
  includeAppendices: boolean;
}

export interface SubmissionPackResult {
  success: boolean;
  files: {
    name: string;
    content: string;
    type: 'pdf' | 'docx' | 'txt';
  }[];
  error?: string;
}

export class SubmissionPackGenerator {
  private program: any;
  private plan: PlanDocument;

  constructor(program: any, plan: PlanDocument) {
    this.program = program;
    this.plan = plan;
  }

  async generateSubmissionPack(options: SubmissionPackOptions): Promise<SubmissionPackResult> {
    try {
      const files: { name: string; content: string; type: 'pdf' | 'docx' | 'txt' }[] = [];

      // Generate cover page
      if (options.includeCoverPage) {
        const coverPage = this.generateCoverPage(options);
        files.push({
          name: `${options.programName}_Cover_Page.txt`,
          content: coverPage,
          type: 'txt'
        });
      }

      // Generate compliance checklist
      if (options.includeComplianceChecklist) {
        const checklist = this.generateComplianceChecklist(options);
        files.push({
          name: `${options.programName}_Compliance_Checklist.txt`,
          content: checklist,
          type: 'txt'
        });
      }

      // Include business plan
      if (options.includePlan) {
        const planContent = this.formatPlanForSubmission();
        files.push({
          name: `${options.programName}_Business_Plan.txt`,
          content: planContent,
          type: 'txt'
        });
      }

      // Generate financial summary
      if (options.includeFinancials) {
        const financials = this.generateFinancialSummary();
        files.push({
          name: `${options.programName}_Financial_Summary.txt`,
          content: financials,
          type: 'txt'
        });
      }

      // Generate team summary
      if (options.includeTeam) {
        const team = this.generateTeamSummary();
        files.push({
          name: `${options.programName}_Team_Summary.txt`,
          content: team,
          type: 'txt'
        });
      }

      // Generate application checklist
      const applicationChecklist = this.generateApplicationChecklist(options);
      files.push({
        name: `${options.programName}_Application_Checklist.txt`,
        content: applicationChecklist,
        type: 'txt'
      });

      return {
        success: true,
        files
      };
    } catch (error) {
      return {
        success: false,
        files: [],
        error: error instanceof Error ? error.message : 'Failed to generate submission pack'
      };
    }
  }

  private generateCoverPage(options: SubmissionPackOptions): string {
    const currentDate = new Date().toLocaleDateString();
    
    return `
${'='.repeat(80)}
${options.programName.toUpperCase()}
APPLICATION SUBMISSION PACKAGE
${'='.repeat(80)}

Submitted: ${currentDate}
Program Type: ${options.programType.toUpperCase()}
Application ID: ${this.generateApplicationId()}

${'='.repeat(80)}
APPLICANT INFORMATION
${'='.repeat(80)}

Company Name: [TO BE FILLED]
Contact Person: [TO BE FILLED]
Email: [TO BE FILLED]
Phone: [TO BE FILLED]
Address: [TO BE FILLED]

${'='.repeat(80)}
PROGRAM INFORMATION
${'='.repeat(80)}

Program: ${options.programName}
Type: ${options.programType}
Maximum Amount: ${this.program.maxAmount ? `€${this.program.maxAmount.toLocaleString()}` : 'TBD'}
Deadline: ${this.program.deadline || 'TBD'}
Eligibility: ${this.program.eligibility ? this.program.eligibility.join(', ') : 'See program details'}

${'='.repeat(80)}
SUBMISSION CHECKLIST
${'='.repeat(80)}

□ Business Plan (Complete)
□ Financial Projections
□ Team Information
□ Compliance Documentation
□ Supporting Materials
□ Application Form (if required)

${'='.repeat(80)}
NEXT STEPS
${'='.repeat(80)}

1. Review all documents for completeness
2. Fill in any missing information marked with [TO BE FILLED]
3. Submit according to program requirements
4. Keep copies of all submitted materials
5. Follow up as instructed by the program

${'='.repeat(80)}
GENERATED BY PLAN2FUND
${'='.repeat(80)}

This submission package was generated using Plan2Fund's AI-powered business plan creation platform.
For support, visit: https://plan2fund.ai

Generated on: ${currentDate}
Package Version: 1.0
    `.trim();
  }

  private generateComplianceChecklist(options: SubmissionPackOptions): string {
    const complianceItems = this.getComplianceItems(options.programType);
    
    return `
${'='.repeat(80)}
COMPLIANCE CHECKLIST
${options.programName.toUpperCase()}
${'='.repeat(80)}

This checklist ensures your application meets all program requirements.

${'='.repeat(80)}
GENERAL REQUIREMENTS
${'='.repeat(80)}

${complianceItems.general.map((item, index) => `□ ${index + 1}. ${item}`).join('\n')}

${'='.repeat(80)}
PROGRAM-SPECIFIC REQUIREMENTS
${'='.repeat(80)}

${complianceItems.specific.map((item, index) => `□ ${index + 1}. ${item}`).join('\n')}

${'='.repeat(80)}
DOCUMENTATION REQUIREMENTS
${'='.repeat(80)}

${complianceItems.documentation.map((item, index) => `□ ${index + 1}. ${item}`).join('\n')}

${'='.repeat(80)}
SUBMISSION REQUIREMENTS
${'='.repeat(80)}

${complianceItems.submission.map((item, index) => `□ ${index + 1}. ${item}`).join('\n')}

${'='.repeat(80)}
REVIEW CHECKLIST
${'='.repeat(80)}

Before submitting, ensure:
□ All required fields are completed
□ All documents are properly formatted
□ Financial projections are realistic and detailed
□ Team information is current and complete
□ Supporting materials are relevant and up-to-date
□ Application follows program guidelines
□ All deadlines are met

${'='.repeat(80)}
NOTES
${'='.repeat(80)}

[Add any specific notes or reminders here]

Generated: ${new Date().toLocaleDateString()}
    `.trim();
  }

  private getComplianceItems(programType: string) {
    const baseItems: {
      general: string[];
      specific: string[];
      documentation: string[];
      submission: string[];
    } = {
      general: [
        'Company is legally registered',
        'Business plan is complete and detailed',
        'Financial projections are realistic',
        'Team has relevant experience',
        'Project aligns with program objectives'
      ],
      specific: [],
      documentation: [
        'Business registration documents',
        'Financial statements (if applicable)',
        'Team CVs and qualifications',
        'Project timeline and milestones',
        'Market analysis and research'
      ],
      submission: [
        'All required forms completed',
        'Documents in correct format',
        'Submitted before deadline',
        'Follow-up contact information provided'
      ]
    };

    switch (programType) {
      case 'grant':
        baseItems.specific = [
          'Project has clear innovation component',
          'Results will be publicly available',
          'No commercial exploitation restrictions',
          'Environmental impact considered',
          'Gender equality aspects addressed'
        ];
        break;
      case 'loan':
        baseItems.specific = [
          'Collateral available (if required)',
          'Repayment plan is realistic',
          'Credit history is acceptable',
          'Business model is sustainable',
          'Risk assessment completed'
        ];
        break;
      case 'equity':
        baseItems.specific = [
          'Equity structure is clear',
          'Exit strategy is defined',
          'Growth potential is significant',
          'Market opportunity is large',
          'Competitive advantage is clear'
        ];
        break;
      case 'visa':
        baseItems.specific = [
          'Job creation potential is clear',
          'Economic benefit to region',
          'Innovation component present',
          'Language requirements met',
          'Integration plan provided'
        ];
        break;
    }

    return baseItems;
  }

  private formatPlanForSubmission(): string {
    let content = `BUSINESS PLAN\n${'='.repeat(50)}\n\n`;
    
    this.plan.sections.forEach((section, index) => {
      content += `${index + 1}. ${section.title.toUpperCase()}\n`;
      content += `${'='.repeat(30)}\n`;
      content += section.content || '[No content yet]';
      content += '\n\n';
    });

    return content;
  }

  private generateFinancialSummary(): string {
    return `
FINANCIAL SUMMARY
${'='.repeat(50)}

[This section would contain a summary of financial projections, 
key metrics, and funding requirements based on the business plan]

Key Financial Metrics:
- Revenue Projection (Year 1): [To be calculated]
- Revenue Projection (Year 2): [To be calculated]
- Break-even Point: [To be calculated]
- Funding Required: [To be calculated]
- Expected ROI: [To be calculated]

Financial Assumptions:
- Growth Rate: [To be specified]
- Market Penetration: [To be specified]
- Pricing Strategy: [To be specified]
- Cost Structure: [To be specified]

Risk Factors:
- Market Risk: [To be assessed]
- Financial Risk: [To be assessed]
- Operational Risk: [To be assessed]
- Regulatory Risk: [To be assessed]

Generated: ${new Date().toLocaleDateString()}
    `.trim();
  }

  private generateTeamSummary(): string {
    return `
TEAM SUMMARY
${'='.repeat(50)}

[This section would contain team member information, 
qualifications, and relevant experience]

Key Team Members:
- CEO/Founder: [Name, Background, Experience]
- CTO/Technical Lead: [Name, Background, Experience]
- CFO/Financial Lead: [Name, Background, Experience]
- [Additional key roles as needed]

Team Strengths:
- [List key strengths and expertise]
- [Highlight relevant experience]
- [Note any industry recognition]

Advisory Board:
- [List advisors and their contributions]
- [Note their relevant experience]

Generated: ${new Date().toLocaleDateString()}
    `.trim();
  }

  private generateApplicationChecklist(options: SubmissionPackOptions): string {
    return `
APPLICATION CHECKLIST
${options.programName.toUpperCase()}
${'='.repeat(50)}

Use this checklist to ensure your application is complete before submission.

PREPARATION PHASE:
□ Business plan is complete and reviewed
□ Financial projections are realistic and detailed
□ Team information is current and complete
□ All required documents are gathered
□ Application form is filled out completely

REVIEW PHASE:
□ All information is accurate and up-to-date
□ Documents are properly formatted
□ All required fields are completed
□ Supporting materials are relevant
□ Application follows program guidelines

SUBMISSION PHASE:
□ All files are ready for upload
□ Submission deadline is noted
□ Contact information is correct
□ Follow-up plan is in place
□ Copies are kept for records

POST-SUBMISSION:
□ Confirmation of receipt is obtained
□ Follow-up schedule is planned
□ Additional materials are prepared if needed
□ Communication channels are established

Generated: ${new Date().toLocaleDateString()}
    `.trim();
  }

  private generateApplicationId(): string {
    const timestamp = Date.now().toString(36);
    const random = Math.random().toString(36).substr(2, 5);
    return `APP-${timestamp}-${random}`.toUpperCase();
  }
}
